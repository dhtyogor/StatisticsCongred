package com.congred.statistics.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.congred.statistics.bean.ClientUsingLogData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT_USING_LOG_DATA".
*/
public class ClientUsingLogDataDao extends AbstractDao<ClientUsingLogData, Long> {

    public static final String TABLENAME = "CLIENT_USING_LOG_DATA";

    /**
     * Properties of entity ClientUsingLogData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Session_id = new Property(1, String.class, "session_id", false, "SESSION_ID");
        public final static Property Start_millis = new Property(2, String.class, "start_millis", false, "START_MILLIS");
        public final static Property End_millis = new Property(3, String.class, "end_millis", false, "END_MILLIS");
        public final static Property Duration = new Property(4, int.class, "duration", false, "DURATION");
        public final static Property Activities = new Property(5, String.class, "activities", false, "ACTIVITIES");
        public final static Property Appkey = new Property(6, String.class, "appkey", false, "APPKEY");
        public final static Property Version = new Property(7, String.class, "version", false, "VERSION");
        public final static Property Deviceid = new Property(8, String.class, "deviceid", false, "DEVICEID");
        public final static Property Useridentifier = new Property(9, String.class, "useridentifier", false, "USERIDENTIFIER");
        public final static Property Lib_version = new Property(10, String.class, "lib_version", false, "LIB_VERSION");
        public final static Property Insertdate = new Property(11, String.class, "insertdate", false, "INSERTDATE");
    }


    public ClientUsingLogDataDao(DaoConfig config) {
        super(config);
    }
    
    public ClientUsingLogDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT_USING_LOG_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SESSION_ID\" TEXT," + // 1: session_id
                "\"START_MILLIS\" TEXT," + // 2: start_millis
                "\"END_MILLIS\" TEXT," + // 3: end_millis
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"ACTIVITIES\" TEXT," + // 5: activities
                "\"APPKEY\" TEXT," + // 6: appkey
                "\"VERSION\" TEXT," + // 7: version
                "\"DEVICEID\" TEXT," + // 8: deviceid
                "\"USERIDENTIFIER\" TEXT," + // 9: useridentifier
                "\"LIB_VERSION\" TEXT," + // 10: lib_version
                "\"INSERTDATE\" TEXT);"); // 11: insertdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT_USING_LOG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClientUsingLogData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(2, session_id);
        }
 
        String start_millis = entity.getStart_millis();
        if (start_millis != null) {
            stmt.bindString(3, start_millis);
        }
 
        String end_millis = entity.getEnd_millis();
        if (end_millis != null) {
            stmt.bindString(4, end_millis);
        }
        stmt.bindLong(5, entity.getDuration());
 
        String activities = entity.getActivities();
        if (activities != null) {
            stmt.bindString(6, activities);
        }
 
        String appkey = entity.getAppkey();
        if (appkey != null) {
            stmt.bindString(7, appkey);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(8, version);
        }
 
        String deviceid = entity.getDeviceid();
        if (deviceid != null) {
            stmt.bindString(9, deviceid);
        }
 
        String useridentifier = entity.getUseridentifier();
        if (useridentifier != null) {
            stmt.bindString(10, useridentifier);
        }
 
        String lib_version = entity.getLib_version();
        if (lib_version != null) {
            stmt.bindString(11, lib_version);
        }
 
        String insertdate = entity.getInsertdate();
        if (insertdate != null) {
            stmt.bindString(12, insertdate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClientUsingLogData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(2, session_id);
        }
 
        String start_millis = entity.getStart_millis();
        if (start_millis != null) {
            stmt.bindString(3, start_millis);
        }
 
        String end_millis = entity.getEnd_millis();
        if (end_millis != null) {
            stmt.bindString(4, end_millis);
        }
        stmt.bindLong(5, entity.getDuration());
 
        String activities = entity.getActivities();
        if (activities != null) {
            stmt.bindString(6, activities);
        }
 
        String appkey = entity.getAppkey();
        if (appkey != null) {
            stmt.bindString(7, appkey);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(8, version);
        }
 
        String deviceid = entity.getDeviceid();
        if (deviceid != null) {
            stmt.bindString(9, deviceid);
        }
 
        String useridentifier = entity.getUseridentifier();
        if (useridentifier != null) {
            stmt.bindString(10, useridentifier);
        }
 
        String lib_version = entity.getLib_version();
        if (lib_version != null) {
            stmt.bindString(11, lib_version);
        }
 
        String insertdate = entity.getInsertdate();
        if (insertdate != null) {
            stmt.bindString(12, insertdate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClientUsingLogData readEntity(Cursor cursor, int offset) {
        ClientUsingLogData entity = new ClientUsingLogData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // session_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // start_millis
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // end_millis
            cursor.getInt(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // activities
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // appkey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // version
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // useridentifier
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lib_version
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // insertdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClientUsingLogData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSession_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStart_millis(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEnd_millis(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.getInt(offset + 4));
        entity.setActivities(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAppkey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVersion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUseridentifier(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLib_version(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInsertdate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClientUsingLogData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClientUsingLogData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClientUsingLogData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
